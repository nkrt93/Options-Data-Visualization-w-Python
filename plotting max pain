def main():
    '''
    Get's the symbol and expiry date n plot the data
    '''
    # gets the user input on symbol and expiry
    tk, expiry, symbol = getInput()
    chain = options_chain(tk, expiry)

    strikes = chain.get(['strike']).values.tolist()
    losses = [total_loss_on_strike(chain, strike[0]) for strike in strikes]

    # max pain min loss to option writers/sellers at strike price
    flat_strikes = [item for sublist in strikes for item in sublist]
    point = losses.index(min(losses))
    max_pain = flat_strikes[point]
    buffer = 3
    bufferHigh = max_pain + (max_pain * (buffer / 100))
    bufferLow = max_pain - (max_pain * (buffer / 100))
    print(f"Maximum Pain: {bufferLow} < {max_pain} < {bufferHigh}")

    # calc put to call ratio
    callChain = chain.loc[chain['CALL'] == True]
    putChain = chain.loc[chain['CALL'] == False]
    pcr = putChain["volume"].sum() / callChain["volume"].sum()
    print("Put to call ratio:", round(pcr, 2))

    # get the cummulated losses
    total = {}
    for i in range(len(flat_strikes)):
        if flat_strikes[i] not in total:
            total[flat_strikes[i]] = losses[i]
        else:
            total[flat_strikes[i]] += losses[i]

    # plot
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))

    # bar chart
    ax1.bar(list(total.keys()), list(total.values()), width=1)
    ax1.set_xlabel('Strike Price')
    ax1.set_title(f'{symbol.upper()} Max Pain')

    # stem chart
    ax2.stem(list(total.keys()), list(total.values()))
    ax2.set_xlabel('Strike Price')
    ax2.set_title(f'{symbol.upper()} Total Losses')
    ax2.axhline(0, color='black', linewidth=0.5)

    plt.show()
